package protobeat.composer.gui.component;

import protobeat.common.core.context.AudioFilePropertiesAdapter;
import protobeat.common.core.event.message.BeatsChangedMessage;
import protobeat.common.core.event.message.RequestFileOpenMessage;
import protobeat.common.core.model.Level;
import protobeat.composer.gui.EmbeddedPanel;
import protobeat.composer.gui.form.JSONFileFilter;
import protobeat.composer.util.FileUtil;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;

public class ApplicationToolbar extends EmbeddedPanel {
	private JButton openButton;
	private JPanel toolbarPanel;
	private JButton exportButton;
	private JButton importButton;

	private JFileChooser jsonExportFileChooser = new JFileChooser();
	private JFileChooser jsonImportFileChooser = new JFileChooser();

	public ApplicationToolbar() {
		embed(toolbarPanel);

		jsonExportFileChooser.setFileFilter(new JSONFileFilter());
		jsonImportFileChooser.setFileFilter(new JSONFileFilter());

		openButton.addActionListener(actionEvent -> serviceManager.bus().emit(new RequestFileOpenMessage()));
		exportButton.addActionListener(actionEvent -> {
			jsonExportFileChooser.showSaveDialog(this);
		});
		importButton.addActionListener(actionEvent -> {
			jsonImportFileChooser.showOpenDialog(this);
		});

		jsonExportFileChooser.addActionListener(actionEvent -> {
			if (actionEvent.getActionCommand().equals("ApproveSelection")) {
				doExport(jsonExportFileChooser.getSelectedFile());
			}
		});

		jsonImportFileChooser.addActionListener(actionEvent -> {
			if (actionEvent.getActionCommand().equals("ApproveSelection")) {
				doImport(jsonImportFileChooser.getSelectedFile());
			}
		});
	}

	private void doImport(File selectedFile) {
		try {
			context.setLevel(context.getObjectMapper().readValue(selectedFile, Level.class));
			serviceManager.bus().emit(new BeatsChangedMessage());
		} catch (IOException e) {
			e.printStackTrace();

			onImportExportError(e);
		}
	}

	private void doExport(File selectedFile) {
		try {
			final AudioFilePropertiesAdapter adapter = context.getCurrentFilePropertiesAdapter();
			Level level = context.getLevel();
			level.setLengthMillis(adapter.durationInMs());
			level.setLengthSeconds(adapter.durationInSeconds());
			level.setLengthMinutes(adapter.durationInMinutes());

			context.getObjectMapper().writeValue(FileUtil.makeSureEndsWith(selectedFile, ".json"), level);
		} catch (IOException e) {
			e.printStackTrace();

			onImportExportError(e);
		}
	}

	private void onImportExportError(Exception e) {
		JOptionPane.showMessageDialog(null, "Something went wrong while importing/exporting the level :/\n\n" + e.getMessage(), "Oopsie woopsie!", JOptionPane.ERROR_MESSAGE);
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		toolbarPanel = new JPanel();
		toolbarPanel.setLayout(new FlowLayout(FlowLayout.LEADING, 5, 5));
		openButton = new JButton();
		openButton.setHorizontalAlignment(0);
		openButton.setHorizontalTextPosition(11);
		openButton.setIcon(new ImageIcon(getClass().getResource("/protobeat/composer/res/file-audio-o@16.png")));
		openButton.setText("Open");
		toolbarPanel.add(openButton);
		exportButton = new JButton();
		exportButton.setHorizontalAlignment(0);
		exportButton.setHorizontalTextPosition(11);
		exportButton.setIcon(new ImageIcon(getClass().getResource("/protobeat/composer/res/floppy-o@16.png")));
		exportButton.setText("Export");
		toolbarPanel.add(exportButton);
		importButton = new JButton();
		importButton.setHorizontalAlignment(0);
		importButton.setHorizontalTextPosition(11);
		importButton.setIcon(new ImageIcon(getClass().getResource("/protobeat/composer/res/folder-open-o@16.png")));
		importButton.setText("Import");
		importButton.putClientProperty("hideActionText", Boolean.FALSE);
		importButton.putClientProperty("html.disable", Boolean.FALSE);
		toolbarPanel.add(importButton);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return toolbarPanel;
	}
}
