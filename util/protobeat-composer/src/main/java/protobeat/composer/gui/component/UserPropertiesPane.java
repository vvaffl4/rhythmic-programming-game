package protobeat.composer.gui.component;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import protobeat.common.core.FailBucket;
import protobeat.common.core.event.EventListener;
import protobeat.common.core.event.message.BPMChangedMessage;
import protobeat.common.core.event.message.BeatsChangedMessage;
import protobeat.common.core.event.message.EventMessage;
import protobeat.composer.gui.EmbeddedPanel;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import java.awt.*;

public class UserPropertiesPane extends EmbeddedPanel {
	private JPanel content;
	private JLabel bpmLabel;
	private JSpinner bpmInput;

	private boolean bpmInputLock = false;

	public UserPropertiesPane() {
		embed(content);

		bpmInput.addChangeListener(this::onBpmInputChanged);

		serviceManager.bus().addListener(new EventListener<EventMessage>() {
			@Override
			public void onMessage(EventMessage message) {
				if (message instanceof BeatsChangedMessage) {
					onBeatsChanged((BeatsChangedMessage) message);
				}
			}
		});
	}

	private void onBeatsChanged(BeatsChangedMessage message) {
		bpmInputLock = true;
		bpmInput.setValue(context.getLevel().getBpm());
		bpmInputLock = false;
	}

	private void onBpmInputChanged(ChangeEvent changeEvent) {
		if (bpmInputLock) return;
		context.getLevel().setBpm((Integer) bpmInput.getValue());
		try {
			serviceManager.bus().emit(new BPMChangedMessage(bpmInput.getValue()));
		} catch (Exception e) {
			FailBucket.accept(e);
		}
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		content = new JPanel();
		content.setLayout(new GridLayoutManager(5, 1, new Insets(10, 0, 0, 10), -1, -1));
		bpmLabel = new JLabel();
		bpmLabel.setText("BPM");
		content.add(bpmLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		content.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		bpmInput = new JSpinner();
		content.add(bpmInput, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(75, -1), null, null, 0, false));
		final JLabel label1 = new JLabel();
		Font label1Font = this.$$$getFont$$$(null, Font.PLAIN, 18, label1.getFont());
		if (label1Font != null) label1.setFont(label1Font);
		label1.setText("Properties");
		content.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		content.add(spacer2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(100, -1), null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return content;
	}
}
